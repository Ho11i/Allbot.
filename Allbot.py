import telebot
import asyncio
#from googletrans import Translator
from telebot import types
import random


bot = telebot.TeleBot('7841264202:AAHvHOTMMevaQDePOPSmVdbraZTMAa77C14')

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton("–ß–∏—Å–ª–∞ —Ñ–∏–±–æ–Ω–∞—á–∏")
    btn2 = types.KeyboardButton("Casino")
    btn3 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
    btn4 = types.KeyboardButton("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    btn5 = types.KeyboardButton("–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫")
    btn6 = types.KeyboardButton("Music")
#   btn7 = types.KeyboardButtun("Time")
    markup.row(btn2)
    markup.add(btn1)
    bot.reply_to(message, f'–ø—Ä–∏–≤–µ—Ç, {message.from_user.first_name}', reply_markup=markup)





@bot.message_handler(func=lambda message: message.text =="–ß–∏—Å–ª–∞ —Ñ–∏–±–æ–Ω–∞—á–∏")
def handler_message(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä—è–¥...")
    bot.register_next_step_handler(message, fibo)

def fibo(message):
    try:
        n = int(message.text)
        if n > 0:
            fib_seq = [0, 1]
            for i in range(2, n):
                fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])
            res = ''
            for i in str(fib_seq):
                res += i
            res = res[1:-2]
            bot.send_message(message.chat.id, f'–ü–µ—Ä–≤—ã–µ {n} —á–∏—Å–µ–ª —Ñ–∏–±–æ–Ω–∞—á–∏, {res}')
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            bot.register_next_step_handler(message, fibo)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        bot.register_next_step_handler(message, fibo)




@bot.message_handler(func=lambda message: message.text == "Casino")
def handler_casino(message):
    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton("–ö–æ—Å—Ç–∏")
    btn2 = types.KeyboardButton("–ö–∞–∑–∏–Ω–æ")
    btn3 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(btn1, btn2)
    markup.row(btn3)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É", reply_markup=markup)






@bot.message_handler(func=lambda message: message.text == "–ö–æ—Å—Ç–∏")
def game_dice(message):
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏?", callback_data="roll_dice")
    markup.add(btn)
    bot.send_message(message.chat.id, "–û—Ö, –ø–æ–π–¥–µ—Ç —â–∞—Å –≤–æ–∑–Ω—è", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "roll_dice")
def callback_roll_dice(call):
    player_dice = bot.send_dice(call.message.chat.id, emoji='üé≤')
    bot_dice = bot.send_dice(call.message.chat.id, emoji='üé≤')
    player_value = player_dice.dice.value
    bot_value = bot_dice.dice.value
    determine_winner(call.message, player_value, bot_value)

def determine_winner(message, player_value, bot_value):
    if player_value > bot_value:
        bot.send_message(message.chat.id, f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n<b>–í–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {player_value}\n<b>–∑–Ω–∞—á–µ–Ω–∏–µ –±–æ—Ç–∞:</b> {bot_value}', parse_mode="html")
    elif player_value < bot_value:
        bot.send_message(message.chat.id, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n<b>–í–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {player_value}\n<b>–∑–Ω–∞—á–µ–Ω–∏–µ –±–æ—Ç–∞:</b> {bot_value}', parse_mode='html')
    else:
        bot.send_message(message.chat.id, f'–ù–∏—á—å—è!\n<b>–í–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {player_value}\n<b>–∑–Ω–∞—á–µ–Ω–∏–µ –±–æ—Ç–∞:</b> {bot_value}', parse_mode='html')





@bot.message_handler(func=lambda message: message.text == "–ö–∞–∑–∏–Ω–æ")
def casino(message):
    slot_result = [random.choice(['üçí', 'üçã', 'üîî', '‚≠ê', 'üçâ']) for _ in range(3)]

    if len(set(slot_result)) == 1:
        bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n–í—ã –≤—ã–±–∏–ª–∏ {slot_result} –∏ <b>–≤—ã–∏–≥—Ä–∞–ª–∏!</b>', parse_mode='html')
    else:
        bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.\n<b>–í–∞—à–∏ —Å–ª–æ—Ç—ã:</b>\n{slot_result}', parse_mode='html')


@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def back(message):
    start(message)






































































bot.polling(none_stop=True)